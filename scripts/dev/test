#!/usr/bin/env python

# Copyright (c) 2015-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the license found in the LICENSE file in
# the root directory of this source tree.

# Set up the logging early on in the process.
import logging
logging.basicConfig(level=logging.INFO, format='%(message)s')

# Do other ordinary imports.
import os
import os.path
import sys

# Add the lib/ directory to $PYTHONPATH so library code can be imported.
sys.path.append(os.path.join(os.path.dirname(__file__), '../lib'))

# Parse the command-line arguments.
import atom
from dependencies import check_dependencies
import fs
import optparse
parser = optparse.OptionParser(usage='usage: %prog [options] [package-names]',
                               description='Run all tests for Nuclide')
# If you are certain that all of the packages have their dependencies installed correctly,
# skipping the installation step can save a considerable amount of time.
parser.add_option('--no-install', action='store_true', default=False, help='Skip `./setup` step')
parser.add_option('--no-module-cycle-check', action='store_true', default=False, help='Skip `./module_cycle_check` step')
parser.add_option('--verbose', action='store_true', default=False, help='Verbose output')
parser.add_option('--no-atom', action='store_true', default=False, help='Exclude packages that depend on Atom')
parser.add_option('--run-in-band', action='store_true', default=False, help='Run tests in a single process')
parser.add_option('--no-version', action='store_true', default=False, help='Ignore mismatched versions of Atom/npm/node/apm')
parser.add_option('--run-integration-tests', action='store_true', default=False, help='Only run tests in Nuclide/spec')
atom.add_args_for_env_setup(parser)
options, args = parser.parse_args(sys.argv[1:])

run_in_band = options.run_in_band
verbose = options.verbose

# When testing the server packages, only `node` and `npm` need to be on the $PATH.
include_apm = not options.no_atom
atom.add_node_executables_to_path(parser, include_apm)

should_version_check = not options.no_version
if should_version_check:
    check_dependencies(include_apm)

# Run ./lint_packages first because it is cheap to run and catches a lot of errors.
import subprocess
try:
    subprocess.check_call([
        os.path.join(os.path.dirname(__file__), 'lint_packages'),
    ])
except subprocess.CalledProcessError:
    sys.exit(1)

# Run ./setup, if appropriate.
if not options.no_install:
    # Run setup.
    setup = os.path.join(os.path.dirname(__file__), 'setup')
    setup_args = [setup]
    if options.atom_app_dir:
        setup_args += ['--atom-app-dir', options.atom_app_dir]
    if options.no_atom:
        setup_args += ['--no-atom']
    subprocess.check_call(setup_args)

# Run ./module_cycle_check
if not options.no_module_cycle_check:
    try:
        subprocess.check_call([
            os.path.join(os.path.dirname(__file__), 'module_cycle_check'),
        ])
    except subprocess.CalledProcessError:
        sys.exit(1)

# Create the constructor args for JsTestRunner.
from package_manager import PackageManager
package_manager = PackageManager()

# Some tests compare created files and all their properties to an oracle. If
# they are created with a different umask, then the permissions are different
# and the tests fail.
os.umask(022)

# Validate explicit package names if given
for package_name in args:
    if not package_manager.is_local_dependency(package_name):
        raise Exception('%s is not a valid nuclide package name' % (package_name))

# Create and run JsTestRunner.
from js_test_runner import JsTestRunner
test_runner = JsTestRunner(package_manager, include_apm, args, verbose, run_in_band)
if options.run_integration_tests:
    test_runner.run_integration_tests()
else:
    test_runner.run_tests()
